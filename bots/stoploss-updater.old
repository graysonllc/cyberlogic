import os
import sys
import json
from operator import itemgetter
import re
import memcache
import codecs
import logging
import sys
import pymysql
import time
import requests
import redis
import configparser
import datetime

root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ['LD_LIBRARY_PATH'] = '/usr/local/lib'
sys.path.append(root + '/python')

mc = memcache.Client(['127.0.0.1:11211'], debug=0)

#checkposts

r = redis.Redis(host='localhost', port=6379, db=0)

botlist=r.smembers("botlist")

print(":::STOPLOSS/MOVER Polling Running Bots\n")

import ccxt  # noqa: E402
	
def get_exchange():
	
	#Read in our apikeys and accounts
	config = configparser.ConfigParser()
	config.read('/root/akeys/b.conf')
	conf=config['binance']
	
	binance_api_key=config['binance']['API_KEY']
	binance_api_secret=config['binance']['API_SECRET']
	
	exchange = ccxt.binance({
    'apiKey': binance_api_key,
    'secret': binance_api_secret,
    'enableRateLimit': True,
    'rateLimit': 3600,
    'verbose': False,  # switch it to False if you don't want the HTTP log
	})
	return(exchange)
	
exchange=get_exchange()

def fetch_last_order(exchange,symbol):
	ret=exchange.fetch_closed_orders (symbol, 1);
	if ret:
		data=ret[-1]['info']
		side=data['side']
		price=float(data['price'])
		return data
	else:
		print("returning: 0")
		data=0
		return data


def loop_bots():
	
	exchange=get_exchange()
	botlist=r.smembers("botlist")
	for bot_name in botlist:
		bot_name=bot_name.decode('utf-8')
		symbol=bot_name.upper()
		ts=float(r.get(bot_name))
		running=datetime.datetime.fromtimestamp(ts).strftime("%Y-%m-%d %H:%M:%S")
		redis_key="bconfig-"+symbol		
	
		all=r.hgetall(redis_key)
		
		trade_from=r.hget(redis_key,'trade_from').decode('utf-8')
		trade_to=r.hget(redis_key,'trade_to').decode('utf-8')
		bot_id=r.hget(redis_key,'id')
		ts=float(r.get(bot_name).decode('utf-8'))				
		running=datetime.datetime.fromtimestamp(ts).strftime("%Y-%m-%d %H:%M:%S")				
		
		key=str(symbol)+'-TRADES'	
		key=str(symbol)+'-LAST-PRICE'	
		if mc.get(key):
			market_price=float(mc.get(key))

		buy_array=fetch_last_order(exchange,symbol)
		units=float(buy_array['executedQty'])

		if buy_array['type']=='MARKET':
			buy_price=float(buy_array['cummulativeQuoteQty'])/units
		else:
			buy_price=float(buy_array['price'])

		profit_per_unit=market_price-buy_price
		profit_total=float(profit_per_unit*units)
		profit_total=round(profit_total,8)
		prices = [buy_price,market_price]
		for a, b in zip(prices[::1], prices[1::1]):
			percent=100 * (b - a) / a
			percent=round(percent,2)

		investment_start=units*buy_price
		investment_now=units*market_price	
		bot_id=bot_id.decode('utf-8')
		
		#Stoploss Stuff
		original_stoploss_percent=r.hget(redis_key,'stoploss_percent').decode('utf-8')
		original_stoploss_price_ded=buy_price/100*float(original_stoploss_percent)
		original_stoploss_price=buy_price-original_stoploss_price_ded
		
		message=":::BOT " +str(symbol)+"\nSTARTED: "+str(running)+str("\nBUY PRICE: ")+str(buy_price)+"\nPRICE NOW: "+str(market_price)+"\nUNITS: "+str(units)
		message=message+"\nVALUE START "+'('+str(trade_to)+'): '+str(investment_start)
		message=message+"\nVALUE NOW "+'('+str(trade_to)+'): '+str(investment_now)
		message=message+"\nP&L: "+str(profit_total)+' ('+str(percent)+'%)'
		message=message+"\nBOT ID: "+str(bot_id)
		message=message+"\nORIGINAL STOPLOSS PRICE: "+str(original_stoploss_price)
		message=message+"\nORIGINAL STOPLOSS PERCENT: "+str(original_stoploss_percent)
	
		if r.hget(redis_key,"checkpoints"):
			checkpoint_stoploss=float(r.hget(redis_key, 'checkpoint_stoploss').decode('utf-8'))
			checkpoints=int(r.hget(redis_key, 'checkpoints').decode('utf-8'))
			message=message+"\nLAST CHECKPOINT: "+str(checkpoint_stoploss)
			message=message+"\nCHECKPOINTS: "+str(checkpoints)

		bkey=str(symbol)+'-UPDATE'
		r.set(bkey,message)		
	
		print(message)
		
		if profit_total>0:
			
			dec=buy_price/100*float(original_stoploss_percent)
			new_stoploss=market_price-dec	
			new_stoploss=round(new_stoploss,8)
			key=str(symbol)+'-SYSTEM-STOPLOSS'
			if mc.get(key):
				
				last_stoploss=mc.get(key)		
				if new_stoploss>last_stoploss:
					ikey=str(bot_id)+'-GOALPOSTS'
					cycles=r.incr(ikey)
						
					gkey=str(bot_id)+'-GOALPOST-STOPLOSS'
					r.set(gkey,new_stoploss)				
	
					print(str(symbol)+":::STOPLOSS/MOVER MOVED GOAL POST: "+str(cycles)+" Times!\n")
					key=str(symbol)+'-SYSTEM-STOPLOSS'
					mc.set(key,new_stoploss,864000)		

					print("Goal Post Move Set :"+str(key)+" Stoploss to "+str(new_stoploss))
					mc.set(key,new_stoploss,86400)	
					
					r.hincrby(redis_key, 'checkpoints',1)
					r.hset(redis_key, 'checkpoint_stoploss',new_stoploss)
			else:
				print("First Time Set :"+str(key)+" Stoploss to "+str(original_stoploss_price))
				mc.set(key,original_stoploss_price,86400)	
loop_bots()


def loop_bots_old():
	
	for bot_name in botlist:
		bot_name=bot_name.decode('utf-8')
		symbol=bot_name.upper()
		ts=float(r.get(bot_name))
		running=datetime.datetime.fromtimestamp(ts).strftime("%Y-%m-%d %H:%M:%S")
		
		redis_key="bconfig-"+symbol		
		trade_from=r.hget(redis_key,'trade_from').decode('utf-8')
		trade_to=r.hget(redis_key,'trade_to').decode('utf-8')
		bot_id=r.hget(redis_key,'id')

		key=str(symbol)+'-TRADES'	
		key=str(symbol)+'-LAST-PRICE'	
		if mc.get(key):
					
			market_price=float(mc.get(key))

			buy_array=fetch_last_order(exchange,symbol)
			buy_price=float(buy_array['price'])
			units=float(buy_array['executedQty'])

			if buy_array['type']=='MARKET':
				buy_price=float(buy_array['cummulativeQuoteQty'])/units
			else:
				buy_price=float(buy_array['price'])
			
			profit_per_unit=market_price-buy_price
			profit_total=float(profit_per_unit*units)
			profit_total=round(profit_total,8)
			prices = [buy_price,market_price]
			for a, b in zip(prices[::1], prices[1::1]):
				percent=100 * (b - a) / a
				percent=round(percent,2)

			r.hset(redis_key, 'trade_buy_price',buy_price)
			r.hset(redis_key, 'trade_units',units)

			investment_start=units*buy_price
			investment_now=units*market_price
			bot_id=bot_id.decode('utf-8')

			print(":::BOT " +str(symbol)+"\nSTARTED: "+str(running)+str("\nBUY PRICE: ")+str(buy_price)+"\nPRICE NOW: "+str(market_price)+"\nUNITS: "+str(units))
			print("VALUE START "+'('+str(trade_to)+'): '+str(investment_start))
			print("VALUE NOW "+'('+str(trade_to)+'): '+str(investment_now))
			print("P&L: "+str(profit_total)+' ('+str(percent)+'%)')
			print("BOT ID: "+str(bot_id))

			print(symbol+str(":::STOPLOSS/MOVER Last Buy Price: "+str(buy_price)+" Market Price: "+str(market_price))+" Units: "+str(units))		
		
			profit=market_price-buy_price
			profit=profit*units
			prices = [buy_price,market_price]
			for a, b in zip(prices[::1], prices[1::1]):
				percent=100 * (b - a) / a
				percent=round(percent,2)
				profit=round(profit,2)
				r.hmset(redis_key, 'trade_profit',buy_price)
				r.hmset(redis_key, 'trade_units',units)

			message=str(symbol)+":::STOPLOSS/MOVER Profit STATS: Profit: "+str(profit)+' ('+str(percent)+'%)'
			print(message)

			key=str(symbol)+'-ORIGINAL-SL'	
			if mc.get(key):
				original_stoploss=mc.get(key)
				original_stoploss_price_ded=buy_price/100*original_stoploss
				original_stoploss_price=buy_price-original_stoploss_price_ded

			print(symbol+str(":::STOPLOSS/MOVER ORIGINAL STOPLOSS PRICE: "+str(original_stoploss_price)))

			key=str(symbol)+'-SYSTEM-STOPLOSS'
			if profit>0:

				dec=buy_price/100*original_stoploss
				stoploss=market_price-dec
				
				print(symbol+":::STOPLOSS/MOVER Market Price Now:"+str(market_price)+" is above last buy lets move the goal posts\n")
				
				key=str(symbol)+'-SYSTEM-STOPLOSS'
				if mc.get(key):
					last_cycle_inc=mc.get(key)
						
					if stoploss>last_cycle_inc:
						key=str(symbol)+'-GOALPOSTS'
						cycles=r.incr(key)
						print(str(symbol)+":::STOPLOSS/MOVER MOVED GOAL POST: "+str(cycles)+" Times!\n")
						key=str(symbol)+'-SYSTEM-STOPLOSS'
						mc.set(key,stoploss,86400)		
						
						r.hincrby(redis_key, 'checkpoints',1)
						r.hset(redis_key, 'checkpoint_stoploss',stoploss)
						r.hset(redis_key, 'trade_buy_price',buy_price)
						r.hset(redis_key, 'trade_units',units)	
				else:
					key=str(symbol)+'-SYSTEM-STOPLOSS'
					mc.set(key,stoploss,86400)			

while True:
	#try:
	loop_bots()
		#print("STOPLOSS UPDATER")
	#except:
	#	print("")
	#time.sleep(5)		


		